/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/Application.java to edit this template
 */
package directorytree;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author admin
 */
public class MainForm extends javax.swing.JFrame {
    private File fileLog;
    /**
     * Creates new form MainForm
     */
    public MainForm() {
        openFileLog();
        initComponents();
    }
    
    private void openFileLog() {
        try {
            String path = "C:\\Users\\admin\\Downloads\\Log\\fileLog.txt";
            this.fileLog = new File(path);
            if(!this.fileLog.exists())
                this.fileLog.createNewFile();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void writeLog(String msg) {
        try {
            FileOutputStream fos = new FileOutputStream(this.fileLog, true);
            OutputStreamWriter osw = new OutputStreamWriter(fos, StandardCharsets.UTF_8);
            BufferedWriter bw = new BufferedWriter(osw);
            
            // Get time
            LocalDateTime currDateTime = LocalDateTime.now();
            String patternDateTime = "yyyy-MM-dd HH:mm:ss";
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern(patternDateTime);
            String time = currDateTime.format(dtf);
            // Get user
            String user = "USER";
            // Get mgs
            // Write fileLog
            bw.append(time + " " + user + " " + msg);
            bw.newLine();
            bw.flush();
            bw.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelFolder = new javax.swing.JLabel();
        jTextFolder = new javax.swing.JTextField();
        jButtonChoose = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        DisplayTree = new javax.swing.JTextPane();
        jButtonDelete = new javax.swing.JButton();
        jButtonRename = new javax.swing.JButton();
        jButtonCopy = new javax.swing.JButton();
        jButtonMove = new javax.swing.JButton();
        jButtonLog = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabelFolder.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabelFolder.setText("Folder");

        jTextFolder.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jButtonChoose.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jButtonChoose.setText("Open");
        jButtonChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonChooseActionPerformed(evt);
            }
        });

        DisplayTree.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        DisplayTree.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jScrollPane1.setViewportView(DisplayTree);

        jButtonDelete.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButtonDelete.setText("Delete");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jButtonRename.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButtonRename.setText("Rename");
        jButtonRename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRenameActionPerformed(evt);
            }
        });

        jButtonCopy.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButtonCopy.setText("Copy");
        jButtonCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCopyActionPerformed(evt);
            }
        });

        jButtonMove.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButtonMove.setText("Move");
        jButtonMove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMoveActionPerformed(evt);
            }
        });

        jButtonLog.setText("Logs");
        jButtonLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLogActionPerformed(evt);
            }
        });

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonLog)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonMove, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(jButtonCopy, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jButtonRename, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jButtonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addComponent(jButtonChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonDelete, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                    .addComponent(jButtonCopy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonRename, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonMove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonLog)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void jButtonChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonChooseActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int result = chooser.showOpenDialog(this);
        if(result == JFileChooser.APPROVE_OPTION) {
            String path = chooser.getSelectedFile().getAbsolutePath();
            jTextFolder.setText(path);
            DisplayTree.setText(listAllFiles(path, 0));
        }
        writeLog("Đã mở đường dẫn: " + jTextFolder.getText() + " thành công!");
    }//GEN-LAST:event_jButtonChooseActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        int choose = JOptionPane.showConfirmDialog(this, "Are you sure delete all items?");
        if(choose == JOptionPane.NO_OPTION)
            return;
        String path = jTextFolder.getText();
        deleteFiles(path);
        JOptionPane.showMessageDialog(this, "Delete Succcess!");
        writeLog("Đã xóa đường dẫn: " + path + " thành công!");
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonRenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRenameActionPerformed
        String fileRename = JOptionPane.showInputDialog(this, "Enter your file?");
        try {
            // Old File
            String path = jTextFolder.getText();
            File oldFile = new File(path);
            
            // New File
            String newPath = oldFile.getParent() + "\\" + fileRename;
            File newFile = new File(newPath);
            
            // Change old file -> new file
            if(oldFile.renameTo(newFile)) {
                JOptionPane.showMessageDialog(this, "Rename file success!");
                jTextFolder.setText(newPath);
                writeLog("Đã thay đổi đường dẫn: " + path + " thành " + newPath);
            } else {
                JOptionPane.showMessageDialog(this, "Rename file faulure!");
                writeLog("Không thể thay đổi đường dẫn này!");
            }
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButtonRenameActionPerformed

    private void jButtonCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCopyActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int result = chooser.showOpenDialog(this);
        if(result == JFileChooser.APPROVE_OPTION) {
            String source = jTextFolder.getText();
            String destination = chooser.getSelectedFile().getAbsolutePath();
            copy(source, destination);
            JOptionPane.showMessageDialog(this, "Copy success!");
            writeLog("Đã copy đường dẫn thành công!");
        }
    }//GEN-LAST:event_jButtonCopyActionPerformed

    private void jButtonMoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMoveActionPerformed
        // Cach 1: File (copy + delete)
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int result = chooser.showOpenDialog(this);
        if(result == JFileChooser.APPROVE_OPTION) {
            String source = jTextFolder.getText();
            String destination = chooser.getSelectedFile().getAbsolutePath();
            copy(source, destination);
            deleteFiles(source);
            JOptionPane.showMessageDialog(this, "Move success!");
            writeLog("Đã move đường dẫn thành công!");
        }
        // Cach 2: Files (move)
    }//GEN-LAST:event_jButtonMoveActionPerformed

    private void jButtonLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLogActionPerformed
        try {
            FileInputStream fis = new FileInputStream(this.fileLog);
            InputStreamReader isr = new InputStreamReader(fis, StandardCharsets.UTF_8);
            BufferedReader br = new BufferedReader(isr);
            // Get data from file logs
            String result = "";
            String line = "";
            while((line = br.readLine()) != null) {
                result += line;
                result += "\n";
            }
            DisplayTree.setText(result);
        } catch (Exception e) {
            e.printStackTrace();
            writeLog("Không thể đọc file logs!!!");
        }
        
    }//GEN-LAST:event_jButtonLogActionPerformed

    private void copy(String source, String dest) {
        try {
            Path srcPath = Path.of(source);
            Path srcDest = Path.of(dest);
            
            Path newPath = srcDest.resolve(srcPath.getFileName());
            Files.copy(srcPath, newPath, StandardCopyOption.COPY_ATTRIBUTES);
            File myFile = new File(source);
            if(myFile.isDirectory()) {
                for(File f : myFile.listFiles()) {
                    copy(f.getAbsolutePath(), dest + "\\" + srcPath.getFileName());
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Copy faulure!");
        }
    }
    
    private void deleteFiles(String path) {
        try {
            File myFile = new File(path);
            if(myFile.isDirectory()) {
                for(File f : myFile.listFiles()) {
                    deleteFiles(f.getAbsolutePath());
                }
            }
            myFile.delete();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private String listAllFiles(String path, int level) {
        File myFile = new File(path);
        
        if(!myFile.exists()) return "";
        
        String result = "";
        for(int i = 0; i < level; i++) {
            result += "\t";
        }
        result += (level == 0 ? "" : "|--");
        result += myFile.getName() + "\n";  
        
        if(myFile.isFile()) return result;
        
        for (File f : myFile.listFiles()) {
            result += listAllFiles(f.getAbsolutePath(), level + 1);
        }
        
        return result;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws ClassNotFoundException {
        /* Set the Nimbus look and feel */
        try {
             UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane DisplayTree;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButtonChoose;
    private javax.swing.JButton jButtonCopy;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonLog;
    private javax.swing.JButton jButtonMove;
    private javax.swing.JButton jButtonRename;
    private javax.swing.JLabel jLabelFolder;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFolder;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables

}
